generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// provider  = "postgresql"
// url       = env("DATABASE_URL")
// directUrl = env("DIRECT_URL")

model User {
  id            String     @id
  name          String
  email         String
  emailVerified Boolean    @default(false)
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  level         String     @default("User")
  points        Int        @default(0)
  isCreator     Boolean    @default(false)
  earnings      Float      @default(0)
  sessions      Session[]
  accounts      Account[]
  works         Work[]
  purchases     Purchase[]
  reviews       Review[]
  followers     Follow[]   @relation("UserFollowers")
  following     Follow[]   @relation("UserFollowing")

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  userId    String
  token     String
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

// 应用特定模型

model Work {
  id           String   @id @default(uuid())
  title        String
  description  String?
  price        Float
  category     String
  tags         String?
  fileUrl      String?
  thumbnailUrl String?
  status       String?
  earnings     Float    @default(0)
  downloads    Int      @default(0)
  rating       Float    @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // 关联
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  purchases Purchase[]
  reviews   Review[]

  @@map("works")
}

model Purchase {
  id        String   @id @default(uuid())
  amount    Float
  createdAt DateTime @default(now())

  // 关联
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  workId String
  work   Work   @relation(fields: [workId], references: [id], onDelete: Cascade)

  @@unique([userId, workId])
  @@map("purchases")
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  workId String
  work   Work   @relation(fields: [workId], references: [id], onDelete: Cascade)

  @@unique([userId, workId])
  @@map("reviews")
}

model Follow {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())

  // 关联
  followerId  String
  followingId String
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}
